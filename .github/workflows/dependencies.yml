name: 🔄 Dependency Updates

on:
  schedule:
    # Run weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of update to perform'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

jobs:
  check-dependencies:
    name: 🔍 Check Dependencies
    runs-on: ubuntu-latest
    outputs:
      has-updates: ${{ steps.check.outputs.has-updates }}
      security-updates: ${{ steps.security.outputs.has-security-updates }}
    steps:
    - name: 📁 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🔍 Check for outdated packages
      id: check
      run: |
        echo "📊 Checking for outdated packages..."
        if npm outdated --json > outdated.json 2>/dev/null; then
          if [ -s outdated.json ]; then
            echo "has-updates=true" >> $GITHUB_OUTPUT
            echo "⚠️ Outdated packages found:"
            cat outdated.json | jq -r 'to_entries[] | "\(.key): \(.value.current) → \(.value.wanted)"'
          else
            echo "has-updates=false" >> $GITHUB_OUTPUT
            echo "✅ All packages up to date"
          fi
        else
          echo "has-updates=false" >> $GITHUB_OUTPUT
          echo "✅ All packages up to date"
        fi
        
    - name: 🔒 Check for security vulnerabilities
      id: security
      run: |
        echo "🔍 Checking for security vulnerabilities..."
        if npm audit --json > audit.json 2>/dev/null; then
          VULN_COUNT=$(cat audit.json | jq '.vulnerabilities | length')
          if [ "$VULN_COUNT" -gt 0 ]; then
            echo "has-security-updates=true" >> $GITHUB_OUTPUT
            echo "⚠️ Security vulnerabilities found: $VULN_COUNT"
            npm audit
          else
            echo "has-security-updates=false" >> $GITHUB_OUTPUT
            echo "✅ No security vulnerabilities found"
          fi
        else
          echo "has-security-updates=false" >> $GITHUB_OUTPUT
          echo "✅ No security vulnerabilities found"
        fi
        
    - name: 📊 Upload reports
      uses: actions/upload-artifact@v4
      with:
        name: dependency-reports
        path: |
          outdated.json
          audit.json
        retention-days: 7

  update-dependencies:
    name: 📦 Update Dependencies
    runs-on: ubuntu-latest
    needs: check-dependencies
    if: needs.check-dependencies.outputs.has-updates == 'true' || needs.check-dependencies.outputs.security-updates == 'true'
    steps:
    - name: 📁 Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🔒 Fix security vulnerabilities
      if: needs.check-dependencies.outputs.security-updates == 'true'
      run: |
        echo "🔧 Fixing security vulnerabilities..."
        npm audit fix --force
        
    - name: 📦 Update patch versions
      if: github.event.inputs.update_type == 'patch' || github.event_name == 'schedule'
      run: |
        echo "📦 Updating patch versions..."
        npx npm-check-updates -u --target patch
        npm install
        
    - name: 📦 Update minor versions
      if: github.event.inputs.update_type == 'minor'
      run: |
        echo "📦 Updating minor versions..."
        npx npm-check-updates -u --target minor
        npm install
        
    - name: 📦 Update major versions
      if: github.event.inputs.update_type == 'major'
      run: |
        echo "📦 Updating major versions..."
        npx npm-check-updates -u
        npm install
        
    - name: 🧪 Run tests after updates
      run: |
        npm run compile
        npm test
        
    - name: 📝 Generate update summary
      run: |
        echo "# Dependency Update Summary" > update-summary.md
        echo "" >> update-summary.md
        echo "## Updated Packages" >> update-summary.md
        echo "" >> update-summary.md
        
        if git diff --name-only | grep -q package.json; then
          echo "📦 package.json has been updated" >> update-summary.md
          echo "" >> update-summary.md
          echo "\`\`\`diff" >> update-summary.md
          git diff package.json >> update-summary.md
          echo "\`\`\`" >> update-summary.md
        else
          echo "No changes to package.json" >> update-summary.md
        fi
        
        if git diff --name-only | grep -q package-lock.json; then
          echo "" >> update-summary.md
          echo "📦 package-lock.json has been updated" >> update-summary.md
        fi
        
    - name: 🔧 Configure git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
    - name: 📝 Create Pull Request
      if: success()
      run: |
        BRANCH_NAME="chore/dependency-updates-$(date +%Y%m%d)"
        git checkout -b "$BRANCH_NAME"
        
        if git diff --exit-code --quiet; then
          echo "No changes to commit"
          exit 0
        fi
        
        git add package.json package-lock.json
        
        # Create commit message
        COMMIT_MSG="chore: update dependencies"
        if [ "${{ needs.check-dependencies.outputs.security-updates }}" = "true" ]; then
          COMMIT_MSG="$COMMIT_MSG (security fixes included)"
        fi
        
        git commit -m "$COMMIT_MSG"
        git push origin "$BRANCH_NAME"
        
        # Create PR using GitHub CLI if available, otherwise create issue
        if command -v gh >/dev/null 2>&1; then
          gh pr create \
            --title "$COMMIT_MSG" \
            --body-file update-summary.md \
            --base main \
            --head "$BRANCH_NAME" \
            --label "dependencies"
        else
          echo "GitHub CLI not available, creating issue instead"
          echo "Branch $BRANCH_NAME created with dependency updates"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
